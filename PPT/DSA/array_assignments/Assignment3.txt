Array Assignment 3

Q1.

--------

def threeSumClosest(nums, target):
    nums.sort()
    n = len(nums)
    closest_sum = float('inf')

    for i in range(n - 2):
        left = i + 1
        right = n - 1

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if current_sum == target:
                return current_sum
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            else:
                right -= 1

    return closest_sum

nums = [-1,2,1,-4]
target = 1
result = threeSumClosest(nums, target)
print(result)

--------

Q2.

--------

def fourSum(nums, target):
    nums.sort()  
    n = len(nums)
    quadruplets = []

    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left = j + 1
            right = n - 1

            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]

                if current_sum == target:
                    quadruplets.append([nums[i], nums[j], nums[left], nums[right]])

                    
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1

                    left += 1
                    right -= 1

                elif current_sum < target:
                    left += 1
                else:
                    right -= 1

    return quadruplets


--------

Q3.

--------

def nextPermutation(nums):
    n = len(nums)
    i = n - 2

    while i >= 0 and nums[i] >= nums[i + 1]:
        i -= 1

    if i >= 0:
        j = n - 1
        while j >= 0 and nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]
    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1


--------

Q4.

--------

def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left

--------

Q5.

--------

def plusOne(digits):
    n = len(digits)
    carry = 1

    for i in range(n - 1, -1, -1):
        digits[i] += carry

        if digits[i] <= 9:
            return digits
        else:
            digits[i] = 0

    if carry > 0:
        digits.insert(0, carry)

    return digits


--------

Q6.

--------

def singleNumber(nums):
    result = 0

    for num in nums:
        result ^= num

    return result

--------

Q7.

--------

def findMissingRanges(nums, lower, upper):
    missingRanges = []
    
    def addRange(start, end):
        if start == end:
            missingRanges.append(str(start))
        else:
            missingRanges.append(str(start) + "->" + str(end))
    
    if nums[0] > lower:
        addRange(lower, nums[0] - 1)
    
    for i in range(1, len(nums)):
        if nums[i] - nums[i-1] > 1:
            addRange(nums[i-1] + 1, nums[i] - 1)
    
    if nums[-1] < upper:
        addRange(nums[-1] + 1, upper)
    
    return missingRanges


--------

Q8.

--------

def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False

    return True

--------