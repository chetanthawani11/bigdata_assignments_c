Array Assignment 2

Q1.

-------

def arrayPairSum(nums):
    nums.sort()
    n = len(nums)
    max_sum = 0
    for i in range(0, n, 2):
        max_sum += nums[i]
    return max_sum

nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result)

--------

Q2.

--------

def distributeCandies(candyType):
    max_candies = len(candyType) // 2  
    unique_candies = len(set(candyType))  
    return min(unique_candies, max_candies)

candyType = [1, 1, 2, 2, 3, 3]
result = distributeCandies(candyType)
print(result)

--------

Q3.

--------

def findLHS(nums):
    counter = {}
    longest_subsequence = 0
    for num in nums:
        if num in counter:
            counter[num] += 1
        else:
            counter[num] = 1
    for num in counter:
        if num + 1 in counter:
            subsequence_length = counter[num] + counter[num + 1]
            longest_subsequence = max(longest_subsequence, subsequence_length)

    return longest_subsequence

nums = [1, 3, 2, 2, 5, 2, 3, 7]
result = findLHS(nums)
print(result)

--------

Q4.

--------

def canPlaceFlowers(flowerbed, n):
    count = 0
    i = 0
    while i < len(flowerbed):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):
            flowerbed[i] = 1  
            count += 1
        i += 1
        if count >= n:
            return True
    return False

flowerbed = [1, 0, 0, 0, 1]
n = 1
result = canPlaceFlowers(flowerbed, n)
print(result)

--------

Q5.

--------

def maximumProduct(nums):
    nums.sort() 
    n = len(nums)
    max_product = nums[n-1] * nums[n-2] * nums[n-3]
    if nums[0] < 0 and nums[1] < 0:
        max_product = max(max_product, nums[0] * nums[1] * nums[n-1])
    return max_product

nums = [-4, -2, 1, 2, 3, 6]
result = maximumProduct(nums)
print(result)

--------

Q6.

--------

def search(nums, target):
    left = 0
    right = len(nums) - 1
    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

nums = [-1, 0, 3, 5, 9, 12]
target = 9
result = search(nums, target)
print(result)

--------

Q7.

--------

def isMonotonic(nums):
    is_increasing = False
    is_decreasing = False
    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            is_increasing = True
        elif nums[i] < nums[i - 1]:
            is_decreasing = True
        if is_increasing and is_decreasing:
            return False
    return True
nums = [1, 2, 4, 5, 7]
result = isMonotonic(nums)
print(result)

--------

Q8.

--------

def minimumScore(nums, k):
    minimum = float('inf')
    maximum = float('-inf')

    for num in nums:
        minimum = min(minimum, num)
        maximum = max(maximum, num)

    return max(0, maximum - minimum - 2 * k)

nums = [1, 3, 5, 7]
k = 3
result = minimumScore(nums, k)
print(result)

--------