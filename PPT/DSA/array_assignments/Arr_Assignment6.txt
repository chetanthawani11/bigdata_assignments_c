Array Assignment 6

Q1.

-------

def find_permutation(s):
    n = len(s)
    perm = [0] * (n + 1)

    for i in range(n + 1):
        perm[i] = i

    i = 0
    while i < n:
        if s[i] == 'D':
            j = i
            while i < n and s[i] == 'D':
                i += 1
            reverse(perm, j, i)
        else:
            i += 1

    return perm

def reverse(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
s = "IDID"
result = find_permutation(s)
print(result)

-------

Q2.

-------

def search_matrix(matrix, target):
    rows = len(matrix)
    cols = len(matrix[0])

    left = 0
    right = rows * cols - 1

    while left <= right:
        mid = (left + right) // 2
        row = mid // cols
        col = mid % cols
        num = matrix[row][col]

        if num == target:
            return True
        elif num < target:
            left = mid + 1
        else:
            right = mid - 1

    return False


-------

Q3.

-------

def valid_mountain_array(arr):
    if len(arr) < 3:
        return False

    i = 1
    while i < len(arr) and arr[i] > arr[i - 1]:
        i += 1

    if i == 1 or i == len(arr):
        return False

    while i < len(arr) and arr[i] < arr[i - 1]:
        i += 1

    return i == len(arr)

-------

Q4.

-------

def findMaxLength(nums):
    max_length = 0
    count = 0
    prefix_sums = {0: -1} 

    for i in range(len(nums)):
        if nums[i] == 0:
            count -= 1
        else:
            count += 1

        if count in prefix_sums:
            max_length = max(max_length, i - prefix_sums[count])
        else:
            prefix_sums[count] = i

    return max_length

-------

Q5.

-------

def minProductSum(nums1, nums2):
    nums1.sort()
    nums2.sort(reverse=True)
    min_product_sum = 0

    for i in range(len(nums1)):
        min_product_sum += nums1[i] * nums2[i]

    return min_product_sum

-------

Q6.

-------

def findOriginalArray(changed):
    if len(changed) % 2 != 0:
        return []
    
    changed.sort()
    original_set = set()

    for num in changed:
        if num % 2 == 0 and num // 2 in original_set:
            original_set.remove(num // 2)
        else:
            original_set.add(num)

    if len(original_set) > 0:
        return []

    return list(original_set)

-------

Q7.

-------

def generateMatrix(n):
    matrix = [[0] * n for _ in range(n)]
    top, bottom, left, right = 0, n - 1, 0, n - 1
    num = 1

    while num <= n * n:
        for i in range(left, right + 1):
            matrix[top][i] = num
            num += 1
        top += 1

        for i in range(top, bottom + 1):
            matrix[i][right] = num
            num += 1
        right -= 1

        for i in range(right, left - 1, -1):
            matrix[bottom][i] = num
            num += 1
        bottom -= 1

        for i in range(bottom, top - 1, -1):
            matrix[i][left] = num
            num += 1
        left += 1

    return matrix


-------

Q8.

-------

def multiply(mat1, mat2):
    m, k = len(mat1), len(mat1[0])
    k, n = len(mat2), len(mat2[0])
    mat2_transpose = [[mat2[j][i] for j in range(k)] for i in range(n)]
    res = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            for p in range(k):
                res[i][j] += mat1[i][p] * mat2_transpose[j][p]

    return res

-------