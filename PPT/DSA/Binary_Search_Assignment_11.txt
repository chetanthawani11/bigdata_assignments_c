Binary_Search_Assignment_11


Q1.

-------

def mySqrt(x):
    if x < 2:
        return x
    
    left = 0
    right = x
    
    while left < right:
        mid = left + (right - left) // 2
        if mid * mid == x:
            return mid
        elif mid * mid < x:
            left = mid + 1
        else:
            right = mid
    
    return left - 1

-------

Q2.

-------

def findPeakElement(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        mid = left + (right - left) // 2
        
        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1
    
    return left


-------

Q3.

-------

def missingNumber(nums):
    missing = len(nums)  
    
    for i in range(len(nums)):
        missing ^= i ^ nums[i]
    
    return missing

-------

Q4.

-------

def findDuplicate(nums):
    slow = nums[0]
    fast = nums[0]
    
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break
    
    slow = nums[0]
    
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]
    
    return slow


-------

Q5.

-------

def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    
    return list(set1.intersection(set2))

-------

Q6.

-------

def findMin(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        mid = left + (right - left) // 2
        
        if nums[mid] > nums[mid + 1]:
            return nums[mid + 1]
        
        if nums[mid] < nums[mid - 1]:
            return nums[mid]
        
        if nums[left] < nums[mid]:
            left = mid + 1
        else:
            right = mid - 1
    
    return nums[left]


-------

Q7.

-------

def searchRange(nums, target):
    left = searchLeft(nums, target)
    right = searchRight(nums, target)
    
    return [left, right]


def searchLeft(nums, target):
    left = 0
    right = len(nums) - 1
    result = -1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            result = mid
            right = mid - 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


def searchRight(nums, target):
    left = 0
    right = len(nums) - 1
    result = -1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            result = mid
            left = mid + 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


-------

Q8.

-------

def intersect(nums1, nums2):
    count = {}
    for num in nums1:
        count[num] = count.get(num, 0) + 1
    
    intersection = []
    for num in nums2:
        if num in count and count[num] > 0:
            intersection.append(num)
            count[num] -= 1
    
    return intersection



-------