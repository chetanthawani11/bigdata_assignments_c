String Assignment 7

Q1.

-------

def isIsomorphic(s, t):
    if len(s) != len(t):
        return False

    s_to_t = {}
    t_to_s = {}

    for char_s, char_t in zip(s, t):
        if char_s in s_to_t and s_to_t[char_s] != char_t:
            return False
        if char_t in t_to_s and t_to_s[char_t] != char_s:
            return False

        if char_s not in s_to_t and char_t not in t_to_s:
            s_to_t[char_s] = char_t
            t_to_s[char_t] = char_s

    return True


-------

Q2.

-------

def isStrobogrammatic(num):
    mapping = {
        "0": "0",
        "1": "1",
        "6": "9",
        "8": "8",
        "9": "6"
    }

    left, right = 0, len(num) - 1

    while left <= right:
        if num[left] not in mapping or mapping[num[left]] != num[right]:
            return False
        left += 1
        right -= 1

    return True


-------

Q3.

-------

def addStrings(num1, num2):
    p1, p2 = len(num1) - 1, len(num2) - 1
    carry = 0
    result = ""

    while p1 >= 0 or p2 >= 0 or carry != 0:
        x = int(num1[p1]) if p1 >= 0 else 0
        y = int(num2[p2]) if p2 >= 0 else 0

        total = x + y + carry
        digit = total % 10
        carry = total // 10

        result = str(digit) + result

        p1 -= 1
        p2 -= 1

    return result


-------

Q4.

-------

def reverseWords(s):
    words = s.split()
    reversed_words = [word[::-1] for word in words]

    return ' '.join(reversed_words)

-------

Q5.

-------

def reverseStr(s, k):
    result = []

    for i in range(0, len(s), 2 * k):
        chunk = s[i:i + 2 * k]

        reversed_chunk = chunk[:k][::-1]
        remaining_chunk = chunk[k:]

        result.append(reversed_chunk + remaining_chunk)

    return ''.join(result)


-------

Q6.

-------

def rotateString(s, goal):
    if len(s) != len(goal):
        return False

    s_double = s + s

    if goal in s_double:
        return True

    return False

-------

Q7.

-------

ef backspaceCompare(s, t):
    stack_s = []
    stack_t = []

    for char in s:
        if char != '#':
            stack_s.append(char)
        elif stack_s:
            stack_s.pop()

    for char in t:
        if char != '#':
            stack_t.append(char)
        elif stack_t:
            stack_t.pop()

    return stack_s == stack_t

-------

Q8.

-------

def checkStraightLine(coordinates):
    x0, y0 = coordinates[0]

    for i in range(1, len(coordinates)):
        x, y = coordinates[i]
        if x - x0 == 0:
            if y != y0:
                return False
        else:
            if (y - y0) / (x - x0) != (coordinates[1][1] - y0) / (coordinates[1][0] - x0):
                return False

    return True

-------
