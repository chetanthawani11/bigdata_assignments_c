String Assignment 8

Q1.

-------

def minimumDeleteSum(s1, s2):
    i, j = 0, 0
    ascii_sum = 0

    while i < len(s1) or j < len(s2):
        if i == len(s1):
            ascii_sum += ord(s2[j])
            j += 1
        elif j == len(s2):
            ascii_sum += ord(s1[i])
            i += 1
        elif s1[i] == s2[j]:
            i += 1
            j += 1
        else:
            ascii_sum += ord(s1[i])
            i += 1

    return ascii_sum


-------

Q2.

-------

def isValid(s):
    stack = []
    for ch in s:
        if ch == '(' or ch == '*':
            stack.append(ch)
        elif ch == ')':
            if stack:
                if stack[-1] == '(':
                    stack.pop()
                else:
                    
                    if stack[-1] == '*':
                        stack.pop()
                    else:
                        return False
            else:
                return False

    left_count = 0
    while stack:
        if stack[-1] == '(':
            left_count += 1
        elif stack[-1] == '*':
            if left_count > 0:
                left_count -= 1
            else:
                
                stack.pop()
        stack.pop()

    return left_count == 0


-------

Q3.

-------

def minSteps(word1, word2):
    i, j = 0, 0
    common_length = 0

    while i < len(word1) and j < len(word2):
        if word1[i] == word2[j]:
            common_length += 1
            i += 1
            j += 1
        elif i + 1 < len(word1) and word1[i + 1] == word2[j]:
            i += 1
        else:
            j += 1

    min_steps = len(word1) + len(word2) - 2 * common_length
    return min_steps


-------

Q4.

-------
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def buildTree(s):
    if not s:
        return None

    value = int(s[0])
    node = TreeNode(value)

    if len(s) > 1:
        opening_parenthesis_index = s.find('(')

        if opening_parenthesis_index != -1:
            closing_parenthesis_index = s.rfind(')')

            substring = s[opening_parenthesis_index + 1:closing_parenthesis_index]
            node.left = buildTree(substring)

            if closing_parenthesis_index < len(s) - 1:
                substring = s[closing_parenthesis_index + 1:]
                node.right = buildTree(substring)

    return node



-------

Q5.

-------

def compress(chars):
    write = 0
    count = 1

    for i in range(1, len(chars)):
        if chars[i] == chars[i - 1]:
            count += 1
        else:
            chars[write] = chars[i - 1]
            write += 1

            if count > 1:
                for digit in str(count):
                    chars[write] = digit
                    write += 1

            count = 1

    chars[write] = chars[-1]
    write += 1

    if count > 1:
        for digit in str(count):
            chars[write] = digit
            write += 1

    return write


-------

Q6.

-------

from collections import Counter

def findAnagrams(s, p):
    indices = []
    p_freq = Counter(p)
    s_freq = Counter(s[:len(p)])

    left = 0
    right = len(p)

    while right <= len(s):
        if s_freq == p_freq:
            indices.append(left)

        s_freq[s[left]] -= 1
        if s_freq[s[left]] == 0:
            del s_freq[s[left]]

        if right < len(s):
            s_freq[s[right]] += 1

        left += 1
        right += 1

    return indices


-------

Q7.

-------

def decodeString(s):
    stack = []
    curr_str = ""
    curr_num = 0

    for c in s:
        if c.isdigit():
            curr_num = curr_num * 10 + int(c)
        elif c == '[':
            stack.append(curr_str)
            stack.append(curr_num)
            curr_str = ""
            curr_num = 0
        elif c == ']':
            num = stack.pop()
            prev_str = stack.pop()
            curr_str = prev_str + num * curr_str
        else:
            curr_str += c

    return curr_str


-------

Q8.

-------


def canSwap(s, goal):
    if len(s) != len(goal):
        return False

    diff_count = 0
    diff_indices = []

    for i in range(len(s)):
        if s[i] != goal[i]:
            diff_count += 1
            diff_indices.append(i)

    if diff_count != 2:
        return False

    i, j = diff_indices
    if s[i] == goal[j] and s[j] == goal[i]:
        return True

    return False


-------