Q1.
def merge_intervals(intervals):
    intervals.sort(key=lambda x: x[0])
    result = []

    for interval in intervals:
        if not result or interval[0] > result[-1][1]:
            result.append(interval)
        else:
            result[-1][1] = max(result[-1][1], interval[1])

    return result

intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
merged = merge_intervals(intervals)
print("Merged intervals:", merged)

-------------------------------------------------------------
Q2.

def sort_colors(nums):
    left = 0
    current = 0
    right = len(nums) - 1

    while current <= right:
        if nums[current] == 0:
            nums[left], nums[current] = nums[current], nums[left]
            left += 1
            current += 1
        elif nums[current] == 1:
            current += 1
        else:
            nums[current], nums[right] = nums[right], nums[current]
            right -= 1

colors = [2, 0, 2, 1, 1, 0]
sort_colors(colors)
print("Sorted colors:", colors)


-------------------------------------------------------------
Q3.
def first_bad_version(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2
        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left

def isBadVersion(version):
    bad_versions = [False, False, False, True, True] 
    return bad_versions[version - 1]

n = 5
first_bad = first_bad_version(n)
print("The first bad version is:", first_bad)



-------------------------------------------------------------

Q4.
def maximum_gap(nums):
    if len(nums) < 2:
        return 0

    min_val = min(nums)
    max_val = max(nums)
    if min_val == max_val:
        return 0

    bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))
    num_buckets = (max_val - min_val) // bucket_size + 1

    buckets = [[float('inf'), float('-inf')] for _ in range(num_buckets)]

    for num in nums:
        index = (num - min_val) // bucket_size
        buckets[index][0] = min(buckets[index][0], num)
        buckets[index][1] = max(buckets[index][1], num)

    max_gap = 0
    prev_max = min_val
    for bucket in buckets:
        if bucket[0] == float('inf'):
            continue
        max_gap = max(max_gap, bucket[0] - prev_max)
        prev_max = bucket[1]

    return max_gap

nums = [3, 6, 9, 1]
max_diff = maximum_gap(nums)
print("Maximum difference between successive elements:", max_diff)


-------------------------------------------------------------

Q5.

def contains_duplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return True
        seen.add(num)
    return False

nums = [1, 2, 3, 1]
result = contains_duplicate(nums)
print("Contains duplicate:", result)



-------------------------------------------------------------

Q6.
def find_min_arrows(points):
    if not points:
        return 0

    points.sort(key=lambda x: x[1])  # Sort the points based on the end coordinate

    arrows = 1
    end = points[0][1]

    for start, curr_end in points:
        if start > end:
            arrows += 1
            end = curr_end

    return arrows

points = [[10,16],[2,8],[1,6],[7,12]]
min_arrows = find_min_arrows(points)
print("Minimum number of arrows:", min_arrows)


-------------------------------------------------------------

Q7.
def length_of_lis(nums):
    n = len(nums)
    dp = [1] * n  # Initialize dp array with 1's

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)

nums = [10, 9, 2, 5, 3, 7, 101, 18]
length = length_of_lis(nums)
print("Length of longest strictly increasing subsequence:", length)


-------------------------------------------------------------

Q8.

def find132pattern(nums):
    n = len(nums)
    stack = []
    s3 = float('-inf')

    for i in range(n - 1, -1, -1):
        if nums[i] < s3:
            return True

        while stack and nums[i] > stack[-1]:
            s3 = stack.pop()

        stack.append(nums[i])

    return False

nums = [1, 2, 3, 4]
pattern_exists = find132pattern(nums)
print("132 pattern exists:", pattern_exists)


-------------------------------------------------------------
