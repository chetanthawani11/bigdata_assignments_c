Linked_list_Assignment_12


Q1.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def deleteMiddleNode(head):
    if not head or not head.next:
        return None

    slow = head
    fast = head
    prev = None

    while fast and fast.next:
        prev = slow
        slow = slow.next
        fast = fast.next.next

    prev.next = slow.next

    return head


-------

Q2.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def hasLoop(head):
    slow = head
    fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return True

    return False

-------

Q3.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def findNthFromEnd(head, N):
    first = head
    second = head

    for _ in range(N):
        if first is None:
            return None  
        first = first.next

    while first is not None:
        first = first.next
        second = second.next

    return second.val

-------

Q4.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def isPalindrome(head):
    slow = head
    fast = head
    stack = []

    while fast and fast.next:
        stack.append(slow.val)
        slow = slow.next
        fast = fast.next.next

    if fast:
        slow = slow.next

    while slow:
        if slow.val != stack.pop():
            return False
        slow = slow.next

    return True

-------

Q5.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def detectAndRemoveLoop(head):
    slow = head
    fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            break

    if fast is None or fast.next is None:
        return head

    slow = head
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    fast.next = None

    return head

-------

Q6.

-------
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def retainAndDelete(head, M, N):
    if M == 0 or N == 0:
        return head

    current = head
    prev = None

    while current:
        for _ in range(M):
            if current is None:
                return head
            prev = current
            current = current.next

        for _ in range(N):
            if current is None:
                break
            current = current.next

        prev.next = current

    return head

-------

Q7.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def insertAlternate(first, second):
    if first is None:
        return second

    if second is None:
        return first

    current_first = first
    current_second = second

    while current_first and current_second:
        first_next = current_first.next
        second_next = current_second.next

        current_second.next = first_next
        current_first.next = current_second

        current_first = first_next
        current_second = second_next

    if current_second:
        current_first.next = current_second

    return first

-------

Q8.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def isCircular(head):
    if head is None:
        return False

    slow = head
    fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return True

    return False

-------
