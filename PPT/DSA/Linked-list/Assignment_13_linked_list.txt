Linked_list_Assignment_13


Q1.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def createNewLinkedList(l1, l2):
    if l1 is None:
        return l2
    if l2 is None:
        return l1

    result = None
    current = None

    while l1 and l2:
        if l1.val >= l2.val:
            new_node = ListNode(l1.val)
            l1 = l1.next
        else:
            new_node = ListNode(l2.val)
            l2 = l2.next

        if result is None:
            result = new_node
            current = result
        else:
            current.next = new_node
            current = current.next

    if l1:
        current.next = l1
    if l2:
        current.next = l2

    return result

-------

Q2.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeDuplicates(head):
    if head is None or head.next is None:
        return head

    current = head
    while current and current.next:
        if current.val == current.next.val:
            current.next = current.next.next
        else:
            current = current.next

    return head

-------

Q3.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def reverseKNodes(head, k):
    if head is None or head.next is None or k == 1:
        return head

    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    current = head

    while current:
        count = 0
        temp = current

        while temp and count < k:
            temp = temp.next
            count += 1

        if count == k:
            prev, current = reverseChunk(prev, current, k)
        else:
            prev.next = current

        current = temp

    return dummy.next


def reverseChunk(prev, current, k):
    prev_next = prev.next
    prev.next = None

    while k > 0:
        next_node = current.next
        current.next = prev.next
        prev.next = current
        current = next_node
        k -= 1

    prev_next.next = current

    return prev_next, current

-------

Q4.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def reverseAlternateKNodes(head, k):
    if head is None or head.next is None or k == 1:
        return head

    current = head
    count = 0

    while current and count < k:
        next_node = current.next
        current.next = reverseAlternateKNodes(next_node, k) if count % (2*k) >= k else next_node
        current = next_node
        count += 1

    return head

-------

Q5.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def deleteLastOccurrence(head, key):
    if head is None:
        return None

    prev = None
    curr = None
    temp = head

    while temp:
        if temp.val == key:
            prev = curr
            curr = temp
        temp = temp.next

    if curr is None:
        return head

    if prev is None:
        head = head.next
    else:
        prev.next = curr.next

    return head

-------

Q6.

-------

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def mergeSortedLists(head1, head2):
    if head1 is None:
        return head2
    if head2 is None:
        return head1

    dummy = ListNode()
    curr = dummy
    ptr1 = head1
    ptr2 = head2

    while ptr1 and ptr2:
        if ptr1.val <= ptr2.val:
            curr.next = ptr1
            ptr1 = ptr1.next
        else:
            curr.next = ptr2
            ptr2 = ptr2.next
        curr = curr.next

    if ptr1:
        curr.next = ptr1
    if ptr2:
        curr.next = ptr2

    return dummy.next

-------

Q7.

-------
class ListNode:
    def __init__(self, data=None):
        self.data = data
        self.prev = None
        self.next = None


def reverseDoublyLinkedList(head):
    if head is None or head.next is None:
        return head

    curr = head
    temp = None

    while curr:
        temp = curr.prev
        curr.prev = curr.next
        curr.next = temp
        curr = curr.prev

    head = temp.prev

    return head



-------

Q8.

-------

class ListNode:
    def __init__(self, data=None):
        self.data = data
        self.prev = None
        self.next = None


def deleteNode(head, position):
    if head is None:
        return head

    if position == 0:
        head = head.next
        if head:
            head.prev = None
        return head

    count = 0
    curr = head

    while curr and count != position:
        curr = curr.next
        count += 1

    if not curr:
        return head

    curr.prev.next = curr.next
    if curr.next:
        curr.next.prev = curr.prev

    return head

-------