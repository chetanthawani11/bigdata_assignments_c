Q1.
def first_unique_character(s):
    char_count = {}  # Dictionary to store character counts
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    for i, char in enumerate(s):
        if char_count[char] == 1:
            return i

    return -1

string = "leetcode"
result = first_unique_character(string)
print(f"The index of the first non-repeating character is: {result}")

--------------------------------------------------------------------------------------------
Q2.
def max_subarray_sum_circular(nums):
    def kadane(nums):
        max_sum = float('-inf')
        curr_sum = 0
        for num in nums:
            curr_sum = max(curr_sum + num, num)
            max_sum = max(max_sum, curr_sum)
        return max_sum

    max_sum_non_circular = kadane(nums)

    total_sum = sum(nums)
    for i in range(len(nums)):
        nums[i] = -nums[i]
    max_sum_circular = total_sum + kadane(nums)

    return max(max_sum_non_circular, max_sum_circular)

nums = [8, -1, 3, 4]
result = max_subarray_sum_circular(nums)
print(f"The maximum possible sum of a non-empty subarray is: {result}")

--------------------------------------------------------------------------------------------

Q3.
def count_students_unable_to_eat(students, sandwiches):
    count = 0
    while students and sandwiches:
        if students[0] == sandwiches[0]:
            students.pop(0)
            sandwiches.pop(0)
            count = 0
        else:
            students.append(students.pop(0))
            count += 1
            if count == len(students):
                break
    return len(students)

students = [1, 1, 0, 0]
sandwiches = [0, 1, 0, 1]
result = count_students_unable_to_eat(students, sandwiches)
print(f"The number of students unable to eat is: {result}")



--------------------------------------------------------------------------------------------

Q4.
from collections import deque

class RecentCounter:
    def __init__(self):
        self.requests = deque()

    def ping(self, t: int) -> int:
        self.requests.append(t)
        while self.requests[0] < t - 3000:
            self.requests.popleft()
        return len(self.requests)


--------------------------------------------------------------------------------------------
Q5.
def find_winner(n, k):
    friends = list(range(1, n+1))
    current = 0

    while len(friends) > 1:
        current = (current + k - 1) % len(friends)
        friends.pop(current)

    return friends[0]

n = 5
k = 2
winner = find_winner(n, k)
print(f"The winner of the game is friend number: {winner}")



--------------------------------------------------------------------------------------------

Q6.
from collections import deque

def reveal_cards_increasing_order(deck):
    deck.sort(reverse=True)  # Sort the deck in decreasing order
    queue = deque()

    for card in deck:
        if queue:
            queue.appendleft(queue.pop())  # Move the bottom card to the top
        queue.appendleft(card)  # Reveal the current card

    return list(queue)

# Example usage
deck = [17, 13, 11, 2, 3, 5, 7]
order = reveal_cards_increasing_order(deck)
print("Order to reveal cards in increasing order:", order)



--------------------------------------------------------------------------------------------

Q7.
from collections import deque

class FrontMiddleBack:
    def __init__(self):
        self.queue = deque()
        self.middle = None

    def pushFront(self, val: int) -> None:
        self.queue.appendleft(val)
        if len(self.queue) == 1:
            self.middle = self.queue[0]
        elif len(self.queue) % 2 == 0:
            self.middle = self.queue[len(self.queue)//2 - 1]

    def pushMiddle(self, val: int) -> None:
        if len(self.queue) % 2 == 0:
            self.queue.insert(len(self.queue)//2, val)
            self.middle = self.queue[len(self.queue)//2]
        else:
            self.queue.insert(len(self.queue)//2, val)
            self.middle = self.queue[len(self.queue)//2]

    def pushBack(self, val: int) -> None:
        self.queue.append(val)
        if len(self.queue) == 1:
            self.middle = self.queue[0]
        elif len(self.queue) % 2 == 1:
            self.middle = self.queue[len(self.queue)//2]

    def popFront(self) -> int:
        if not self.queue:
            return -1
        val = self.queue.popleft()
        if len(self.queue) == 0:
            self.middle = None
        elif len(self.queue) % 2 == 0:
            self.middle = self.queue[len(self.queue)//2 - 1]
        else:
            self.middle = self.queue[len(self.queue)//2]
        return val

    def popMiddle(self) -> int:
        if not self.queue:
            return -1
        if len(self.queue) % 2 == 0:
            index = len(self.queue)//2 - 1
        else:
            index = len(self.queue)//2
        val = self.queue.pop(index)
        if len(self.queue) == 0:
            self.middle = None
        elif len(self.queue) % 2 == 0:
            self.middle = self.queue[len(self.queue)//2 - 1]
        else:
            self.middle = self.queue[len(self.queue)//2]
        return val

    def popBack(self) -> int:
        if not self.queue:
            return -1
        val = self.queue.pop()
        if len(self.queue) == 0:
            self.middle = None
        elif len(self.queue) % 2 == 1:
            self.middle = self.queue[len(self.queue)//2]
        else:
            self.middle = self.queue[len(self.queue)//2 - 1]
        return val




--------------------------------------------------------------------------------------------

Q8.
from collections import deque

class DataStream:
    def __init__(self, value, k):
        self.value = value
        self.k = k
        self.stream = deque()

    def consec(self, num):
        self.stream.append(num)
        if len(self.stream) < self.k:
            return False
        return list(self.stream)[-self.k:] == [self.value] * self.k



--------------------------------------------------------------------------------------------
