Q1.
def roman_to_integer(s):
    roman_values = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    total = 0
    prev_value = 0

    for c in reversed(s):
        value = roman_values[c]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value

    return total
roman_numeral = "XXVII"
integer_value = roman_to_integer(roman_numeral)
print(f"The integer value of {roman_numeral} is: {integer_value}")


-------------------------------------------------------------

Q2.

def length_of_longest_substring(s):
    if not s:
        return 0

    char_set = set()
    max_length = 0
    left = 0
    right = 0

    while right < len(s):
        if s[right] not in char_set:
            char_set.add(s[right])
            max_length = max(max_length, right - left + 1)
            right += 1
        else:
            char_set.remove(s[left])
            left += 1

    return max_length

string = "abcabcbb"
length = length_of_longest_substring(string)
print(f"The length of the longest substring without repeating characters: {length}")



-------------------------------------------------------------

Q3.
def majority_element(nums):
    count = 0
    candidate = None

    for num in nums:
        if count == 0:
            candidate = num
        if num == candidate:
            count += 1
        else:
            count -= 1

    return candidate

nums = [2, 2, 1, 1, 1, 2, 2]
majority = majority_element(nums)
print(f"The majority element is: {majority}")



-------------------------------------------------------------

Q4.
def group_anagrams(strs):
    anagrams = {}

    for word in strs:
        sorted_word = ''.join(sorted(word))
        if sorted_word not in anagrams:
            anagrams[sorted_word] = []
        anagrams[sorted_word].append(word)

    return list(anagrams.values())

strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
anagram_groups = group_anagrams(strs)
print(f"The anagram groups are: {anagram_groups}")



-------------------------------------------------------------

Q5.
def nth_ugly_number(n):
    ugly = [0] * n
    ugly[0] = 1
    i2 = i3 = i5 = 0
    next_multiple_of_2 = 2
    next_multiple_of_3 = 3
    next_multiple_of_5 = 5

    for i in range(1, n):
        ugly[i] = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)

        if ugly[i] == next_multiple_of_2:
            i2 += 1
            next_multiple_of_2 = ugly[i2] * 2

        if ugly[i] == next_multiple_of_3:
            i3 += 1
            next_multiple_of_3 = ugly[i3] * 3

        if ugly[i] == next_multiple_of_5:
            i5 += 1
            next_multiple_of_5 = ugly[i5] * 5

    return ugly[n - 1]

n = 10
ugly_number = nth_ugly_number(n)
print(f"The {n}th ugly number is: {ugly_number}")


-------------------------------------------------------------

Q6.

import heapq
from collections import Counter

def top_k_frequent_words(words, k):
    counter = Counter(words)
    heap = []

    for word, count in counter.items():
        heapq.heappush(heap, (-count, word))

    top_k = []

    for _ in range(k):
        count, word = heapq.heappop(heap)
        top_k.append(word)

    return top_k

words = ["apple", "banana", "apple", "orange", "banana", "apple"]
k = 2
top_k_words = top_k_frequent_words(words, k)
print(f"The {k} most frequent words are: {top_k_words}")


-------------------------------------------------------------

Q7.
from collections import deque

def max_sliding_window(nums, k):
    result = []
    window = deque()

    for i in range(len(nums)):
        while window and window[0] <= i - k:
            window.popleft()
        while window and nums[window[-1]] <= nums[i]:
            window.pop()

        window.append(i)

        if i >= k - 1:
            result.append(nums[window[0]])

    return result

nums = [1, 3, -1, -3, 5, 3, 6, 7]
k = 3
max_window = max_sliding_window(nums, k)
print(f"The maximum sliding window is: {max_window}")



-------------------------------------------------------------

Q8.

def find_closest_elements(arr, k, x):
    left = 0
    right = len(arr) - 1

    while right - left + 1 > k:
        if abs(arr[left] - x) > abs(arr[right] - x):
            left += 1
        else:
            right -= 1

    return arr[left:right + 1]

arr = [1, 2, 3, 4, 5]
k = 3
x = 4
closest_elements = find_closest_elements(arr, k, x)
print(f"The {k} closest elements to {x} are: {closest_elements}")


-------------------------------------------------------------
